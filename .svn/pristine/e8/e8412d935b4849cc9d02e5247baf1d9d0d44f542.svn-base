using ImageCompareGui;
using ImageDiff;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;


namespace ImageCompareGui
{
    public class WorkPerformedArgs: EventArgs{
        public string Data { get; set; }
    }
    public class ImageComparer
    {
        private FormData Data;

        public event EventHandler<WorkPerformedArgs> WorkPerformed;

        protected virtual void OnWorkPerformed(string data)
        {
            WorkPerformed?.Invoke(this, new WorkPerformedArgs() { Data = data });
        }
        public ImageComparer(FormData data)
        {
            Data = data; 
        }

        //Code to compare images
        public double CompareBitMaps(Bitmap img1, Bitmap img2)
        {
            if (img1.Size != img2.Size)
            {
                return 100;
            }

            float diff = 0;

            for (int y = 0; y < img1.Height; y++)
            {
                for (int x = 0; x < img1.Width; x++)
                {
                    diff += (float)Math.Abs(img1.GetPixel(x, y).R - img2.GetPixel(x, y).R) / 255;
                    diff += (float)Math.Abs(img1.GetPixel(x, y).G - img2.GetPixel(x, y).G) / 255;
                    diff += (float)Math.Abs(img1.GetPixel(x, y).B - img2.GetPixel(x, y).B) / 255;
                }
            }

            diff = diff * 100 / (img1.Width * img1.Height * 3);
            return Math.Round(diff, 2);
        }

        //Returns all jpgs in a dir
        public List<FileInfo> GetImages(string path)
        {
           
            OnWorkPerformed("Loading Images " + path);
            DirectoryInfo dir = new DirectoryInfo(path);
            if (dir.Exists)
                return dir.GetFiles("*.jpg").ToList();

            else
                return null;
        }

        public bool CompareFileNames(List<FileInfo> one, List<FileInfo> two)
        {
            OnWorkPerformed("Comparing File Names...");
            one.OrderBy(x => x.Name);
            two.OrderBy(x => x.Name);

            if (one.Count > two.Count)
                OnWorkPerformed("Comparing Directory has too few photos");
            if (one.Count < two.Count)
                OnWorkPerformed("Comparing Directory has too many photos");

            int counter = 0;
            foreach (FileInfo file in one)
            {
                if (file.Name != two[counter].Name)
                {
                    OnWorkPerformed("File Names do not mach up");
                    return false;
                }
                counter++;
            }
            return true;

        }

        public async Task<string> CompareListImages(List<FileInfo> Oimgs, List<FileInfo> Cimgs)
        {

            CompareOptions options = new CompareOptions()
            {
                BoundingBoxColor = Color.Cyan,
                BoundingBoxPadding = 5              
            };

        var comparer = new BitmapComparer(options);
            
            for (int i = 0; i < Oimgs.Count; i++)
            {
                OnWorkPerformed(String.Format("Comparing image {0}...", Oimgs[i].Name));
                string diff = await Task.Factory.StartNew(() => CompareBitMaps(new Bitmap(Oimgs[i].FullName), new Bitmap(Cimgs[i].FullName)).ToString());

                if (diff != "0")
                {
                    
                    string newSave = String.Format(Data.ResultsDirectory + "Oimgs[i].Name");
                    Bitmap combine = comparer.Compare(new Bitmap(Oimgs[i].FullName), new Bitmap(Cimgs[i].FullName));
                    combine.Save(newSave);

                }
                OnWorkPerformed(String.Format("\tdiff: {0} %", diff));

            }

            return "";
        }
    }

}
